#include <Adafruit_Fingerprint.h>

#include <SoftwareSerial.h>
SoftwareSerial mySerial(2, 3);

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

Servo motor1; // DECLARAR SERVO 1
int grados1 = 0; // GRADOS DEL SERVO 1

void setup()  
{
  Serial.begin(9600);
  while (!Serial);  
  delay(100);
  Serial.println("\n\nAdafruit finger detect test");

  
  finger.begin(57600);
  
  if (finger.verifyPassword()) {
    Serial.println("sensor verificado!");
  } else {
    Serial.println("sensor no verificado :(");
    while (1) { delay(1); }
  }

  finger.getTemplateCount();
  Serial.print("el sensor contiene "); Serial.print(finger.templateCount); Serial.println(" huellas");
  Serial.println("Esperando huella valida...");

  motor1.attach (6); // PIN DIGITAL PWM 6 DONDE ESTÁ CONECTADO EL SERVO 1
}

void loop()                    
{
  getFingerprintIDez();
  delay(50);            
}

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("creando datos de imagen");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("no se encontro huella");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("error de comunicacion");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("error de imagen");
      return p;
    default:
      Serial.println("error");
      return p;
  }

  // tarea completada

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("creando datos de imagen");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("datos de huella no procesables");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("error de comunicacion");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("no se encontraron datos de huella");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("no se encontraron datos de huella");
      return p;
    default:
      Serial.println("error");
      return p;
  }
  
  // conversión completa
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("huella detectada!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("error de comunicacion");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("huella no encontrada");
    return p;
  } else {
    Serial.println("error");
    return p;
  }   
  
  // comprobacion completa
  Serial.print("ID verificado #"); Serial.print(finger.fingerID); 
  Serial.print(" confirmado como "); Serial.println(finger.confidence); 

  return finger.fingerID;


  grados1 = 0;
  motor1.write (grados1); // ENVIAR LOS GRADOS AL SERVO 1
  delay(1000);	// ESPERA 1 SEGUNDO EN LA POSICIÓN FIJADA

  grados1 = 60;
  motor1.write (grados1); 
  delay(1000);

  grados1 = 120;
  motor1.write (grados1);
  delay(1000);

  grados1 = 180;
  motor1.write (grados1); 
  delay(1000);

  grados1 = 120;
  motor1.write (grados1); 
  delay(1000);

  grados1 = 60;
  motor1.write (grados1); 
  delay(1000);

}

// regreso a -1 si falla el proceso
int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;

// mensajes de comprobacion de proceso
if (finger.fingerID==2)
{
Serial.println("funcion completada con huella 2");
for(int i=0;i<9;i++)
{
digitalWrite(13,LOW);
delay(500);
digitalWrite(13,HIGH);
delay(500);
}
}

if (finger.fingerID==3)
{
Serial.println("funcion completada con huella 3");  
}



  Serial.print("ID verificado #"); Serial.print(finger.fingerID); 
  Serial.print(" confirmado como "); Serial.println(finger.confidence);
  return finger.fingerID; 
}
